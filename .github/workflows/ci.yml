name: CI

on:
  push:
    branches:
    - main
    tags:
    - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:

env:
  POETRY_VIRTUALENVS_CREATE: false

jobs:
  quality:
    name: Code quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout git repository 🕝
      uses: actions/checkout@v3

    - name: Set up python3.11 🐍
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install poetry 🦄
      uses: Gr1N/setup-poetry@v8
      with:
        poetry-version: 1.6.1

    - name: Load poetry cached libs ⬇
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ${{ runner.os }}-poetry

    - name: Install dependencies 🖥
      run: poetry install --no-interaction

    - name: Lint 🎎
      run: make lint

    - name: Check types w/ mypy 📚
      run: make types

  test:
    name: Run tests
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - name: Checkout git repository 🕝
      uses: actions/checkout@v3

    - name: Set up python ${{ matrix.python-version }} 🐍
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install poetry 🦄
      uses: Gr1N/setup-poetry@v8
      with:
        poetry-version: 1.2.2

    - name: Load poetry cached libs ⬇
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ${{ runner.os }}-poetry

    - name: Install dependencies 🖥
      run: |
        poetry install --no-interaction

    - name: Test code 🔍
      run: make test

    - name: Send Coverage Report 📊
      if: matrix.python-version == 3.11 && matrix.os == 'ubuntu-latest'
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_SERVICE_NAME: github
      run: poetry run coveralls

  docs:
    name: Test Docs
    runs-on: ubuntu-latest

    steps:
    - name: Checkout git repository 🕝
      uses: actions/checkout@v3

    - name: Set up Python3.11 🐍
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install poetry 🦄
      uses: Gr1N/setup-poetry@v8
      with:
        poetry-version: 1.2.2

    - name: Install dependencies 🖥
      run: poetry install --no-interaction --extras "docs"

    - name: Build docs ⚒️
      run: make docs
      # TODO: /bin/sh: 1: sphinx-build: not found, e.g. https://github.com/capellaspace/console-client/actions/runs/3115544245/jobs/5052547042
      continue-on-error: true

  # deploy:
  #   name: Deploy to PyPI
  #   runs-on: ubuntu-latest

  #   # deploy will only be run when there is a tag available
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
  #   needs: [quality, test, docs]  # only run after all other stages succeeded

  #   steps:
  #   - name: Checkout git repository 🕝
  #     uses: actions/checkout@v3

  #   - name: Set up python3.8 🐍
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: 3.8

  #   - name: Install poetry 🦄
  #     uses: Gr1N/setup-poetry@v7
  #     with:
  #       poetry-version: 1.2.2

  #   - name: Build ⚒️ distributions
  #     run: |
  #       poetry build
  #       poetry publish -u __token__ -p ${{ secrets.PYPI_TOKEN }}
